---
title: "Drop vs Filter in Pandas"
format: html
---

## Question 1: Drop vs Filter Strategies

::: {.callout-note}
## Key Difference
- `.drop()` removes specified columns
- `.filter()` keeps specified columns

It's like two ways to clean your desk:
- `drop`: "Remove these three items"
- `filter`: "Keep only these five items"
:::

::: {.callout-tip}
## When to Use Each
Choose `.drop()` when:
- You have a few unwanted columns
- You want to preserve most columns
- You're removing problematic columns

Choose `.filter()` when:
- You know exactly which columns you need
- You want to create a focused subset
- You're building a specific view of the data
:::

## Question 2: Missing Data Handling

::: {.callout-important}
## Understanding .dropna()
- Without `subset`: Removes rows with ANY missing value
- With `subset`: Only checks specified columns

Think of it like attendance:
- Without subset: "Remove if student missed ANY class"
- With subset: "Remove only if missed MATH or SCIENCE"
:::

::: {.callout-note}
## Why Be Selective?
Use `subset` when:
- Some columns can have missing values (like optional fields)
- Critical calculations need complete data
- You want to preserve more rows

Example: In shipping data
- Missing dates are critical (can't calculate delays)
- Missing product notes are okay (not needed for timing analysis)
:::